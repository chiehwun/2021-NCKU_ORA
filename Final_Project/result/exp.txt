實驗一：兩者運行時間比較(pso：10個粒子 vs bas: 3、5、10隻天牛)

結論：pso運行時間比bas(10)快，比bas(5)慢。
原因：
	在bas演算法流程中，一隻天牛會有左右兩個更新方向(相當於兩個粒子)需要考慮，最後選定其中一方向(一個粒子)作為最終選擇解，因此bas(10)相當於有20個例子，而bas(5)相當於10個粒子，但其速度卻比pso快，原因是pso求的是所有粒子中的最佳解，而bas中只要有一隻天牛其誤差小於筏值，就立刻跳出迴圈，因此pso需要比較10個粒子的誤差，bas只須比較小於5個天牛的誤差，兩者速度差距在此顯現。
	


實驗二：精確度比較(pso(10) vs bas(5))

結論：pso(10)精確度最佳。
原因：
	因為pso求出來的解為10個粒子中的最佳解，而bas在乎解只要小於筏值就好，因此從誤差圖也可以看出，bas的誤差接在0.005附近，而pso可以計算出比0.005還更小誤差的解。
	
上次以放在github readme.md的圖片

實驗三：為調整的pso vs 調整後的pso運行時間、效能比較

結論：調整後的pso不管是在運行時間以及誤差上的表現，都比調整前的pso好上許多。
原因：
	過往使用pso求解最佳化問題時，各粒子的初始化位置範圍都是固定不變的，並且為該定義域的最大最小值當作範圍，以此次作業為例為正負pi之間，但其實因為我們的求解問題的各個解之間距離其實並不大，給定如此大的範圍反而使pso搜尋效果不佳，收斂其差，運行時間將近要40分鐘，對於手臂運行軌跡的收斂也十分不理想，因此我們這次的pso參考bas論文中，依據兩解的距離調整更新步長，依樣畫葫蘆，依據兩解的距離來調整粒子的初始化範圍，實驗效過十分理想。
	


實驗四：總體軌跡點數量為4420，拿掉一半對於bas是否也能一樣收斂？(害怕其實是我們的最佳化問題過於簡單(解語解之見距離過近)，對於bas太解單，想挑戰bas的性能如何，是否其演算法中天牛的更新一步，依然適用)

結論：bas一樣能收斂，蛋花費時間變長。
原因：
	解與解距離變長，其求解變得比之前更困難，因此需要花費更長的時間進行求解也合乎邏輯。
